class Solution {
public:
    vector<vector<string>> displayTable(vector<vector<string>>& orders) {
        set<int>tab;
        set<string>food;
        for(int i=0;i<orders.size();i++)
        {
            food.insert(orders[i][2]);
            tab.insert(stoi(orders[i][1]));
        }
        
        //storing col1 as "table" and rest values as "0"
        vector<vector<string>>ans((tab.size()+1),vector<string>(food.size()+1));
        ans[0][0]="Table";
        for(int i=1;i<tab.size()+1;i++)
        {
            for(int j=1;j<food.size()+1;j++)
            ans[i][j]="0";
        }
          //converting set of food an tab into vector to sort
        vector<int>tableno;
                for(auto it:tab)
                    tableno.push_back(it);
                    sort(tableno.begin(),tableno.end());
        vector<string>dish;
                for(auto it:food)
                    dish.push_back(it);
                    sort(dish.begin(),dish.end());           
        
               
               //storing table numbers in table col
               for(int i=0;i<tableno.size();i++)
               ans[i+1][0]=to_string(tableno[i]);

 // storing in map as-  [dish][tableno.] = count
        map<string,map<string,int>>mp;
        for(int i=0;i<orders.size();i++)
        {
            mp[orders[i][2]][orders[i][1]]++;
        }

        //storing dish name in first row
        for(int i=1;i<=dish.size();i++)
        ans[0][i] = dish[i-1];

          //filling count of dish in particular table no. 
        for(int i=1;i<=dish.size();i++)
        {
            for(int j=1;j<=tableno.size();j++)
            {
                   ans[j][i] = to_string(mp[dish[i-1]][to_string(tableno[j-1])]);
            }
        }
           return ans;
        
    }
};
